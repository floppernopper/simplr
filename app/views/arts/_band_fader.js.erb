<script>
  function bands_fader_<%= target + "_" + target_id.to_s %>() {
    // vars for color morphing
    var rgba = [0, 0, 0, 0]; // the targets color values
    var fat_rgba = [false, false, false, false]; // ensures pos/neg
    var color_min = [<%= defined?(love) ? 200 : 1 %>, 1, 1, 0.0]; // when it should go back up
    var color_max = [255, 255, <%= defined?(love) ? 20 : 255 %>, 1]; // when color should go back down
    
    // vars for color_bands Dance of Light!
    var height = 0, y_pos = 0; // vars for color_band animation
    var fat_height = false, fat_y_pos = false;
    var height_min = 0, height_max = 100, y_pos_min = 0, y_pos_max = 100;
    
    // rates of change and speed of animation over time and between cycles
    var change_rate = <%= defined?(slow) ? 0.25 : (defined?(fast) ? 1 : 0.5) %>; // added/subbed each round
    var change_speed = <%= defined?(slow) ? 15 : (defined?(fast) ? 5 : 2.5) %>; // interval speed, higher == slower

    // initialises color values randomly
    for (var i=0; i < rgba.length; i++) {
      if (i < 3) {
  	    rgba[i] = Math.round(Math.random() * 255);
      } else {
  	    rgba[i] = (Math.random() * color_max[3]).toFixed(2);
      }
    }
    
    height = Math.round(Math.random() * 100);
    y_pos = Math.round(Math.random() * 100);
    
    setInterval(function() {
	    // morphs all of rgba back and forth
	    for (var i=0; i < 3; i++) {
		    // flips colors direction of change
		    if (rgba[i] <= color_min[i]) {
			    fat_rgba[i] = false;
		    } else if (rgba[i] >= color_max[i]) {
			    fat_rgba[i] = true;
		    }
		    // fattens or shrinks primaries
		    if (fat_rgba[i]) {
			    rgba[i] -= change_rate;
		    } else {
			    rgba[i] += change_rate;
		    }
	    }

	    // morphs height
	    if (height <= height_min) {
		    fat_height = false;
	    } else if (height >= height_max) {
		    fat_height = true;
	    }
	    // fattens or shrinks y_pos
	    if (fat_height) {
		    height -= change_rate;
	    } else {
		    height += change_rate;
	    }
  
	    // morphs y_pos
	    if (y_pos <= y_pos_min) {
		    fat_y_pos = false;
	    } else if (y_pos >= y_pos_max) {
		    fat_y_pos = true;
	    }
	    // fattens or shrinks y_pos
	    if (fat_y_pos) {
		    y_pos -= change_rate;
	    } else {
		    y_pos += change_rate;
	    }
    
	    // actually applies change
	    var target = $("#<%= target + (target_id.present? ? '_' + target_id.to_s : '') %>");
	    target.css("<%= defined?(background) ? 'background' : 'color' %>",
	      "rgba(" + rgba[0] + ", " + <%= defined?(love) ? 0 : 'rgba[1]' %> + ", " + rgba[2] + ", " + rgba[3] + ")");
      target.css({
        'height' : height,
        'y_pos' : y_pos
      });
    }, change_speed);
  }

  if (!bands_fader_<%= target + "_" + target_id.to_s %>_started) {
    bands_fader_<%= target + "_" + target_id.to_s %>();
    var bands_fader_<%= target + "_" + target_id.to_s %>_started = true;
  }
</script>
